./components/feedback/FeedbackPanel.jsx:    if (prevState.problemID !== nextProps.problem.id || prevState.submissionID !== nextProps.submissionID) {
./components/feedback/FeedbackPanel.jsx:        problemID: nextProps.problem.id
./components/feedback/FeedbackPanel.jsx:    api.post('solution/' + this.props.examID + '/' + this.props.submissionCopy + '/' + this.props.problem.id, {
./components/feedback/FeedbackPanel.jsx:    const blockURI = this.props.examID + '/' + this.props.submissionCopy + '/' + this.props.problem.id
./components/feedback/FeedbackPanel.jsx:        const probIndex = this.props.problem.feedback.findIndex(fb => fb.id === this.props.solution.feedback[i])
./components/feedback/FeedbackPanel.jsx:      this.props.problem.feedback[this.state.selectedFeedbackIndex].id
./components/feedback/FeedbackPanel.jsx:          <FeedbackBlock key={feedback.id} uri={blockURI} graderID={this.props.graderID}
./components/feedback/FeedbackPanel.jsx:            feedback={feedback} checked={this.props.grading && this.props.solution.feedback.includes(feedback.id)}
./components/feedback/FeedbackPanel.jsx:            ref={(selectedFeedbackId === feedback.id) ? this.feedbackBlock : null} grading={this.props.grading}
./components/feedback/FeedbackPanel.jsx:            selected={selectedFeedbackId === feedback.id || feedback.highlight}
./components/feedback/FeedbackBlock.jsx:      this.props.toggleOption(this.props.feedback.id)
./components/feedback/EditPanel.jsx:    if (nextProps.feedback && prevState.id !== nextProps.feedback.id) {
./components/feedback/EditPanel.jsx:        id: fb.id,
./components/feedback/EditPanel.jsx:    if (this.state.id) {
./components/feedback/EditPanel.jsx:      fb.id = this.state.id
./components/feedback/EditPanel.jsx:    if (this.state.id) {
./components/feedback/EditPanel.jsx:      api.del('feedback/' + this.props.problemID + '/' + this.state.id)
./components/feedback/EditPanel.jsx:            id: this.state.id,
./components/PanelMCQ.jsx:    if (prevState.problemId !== newProps.problem.id) {
./components/PanelMCQ.jsx:        problemId: prob.id,
./components/NavBar.jsx:    <Link className='navbar-link' to={'/exams/' + (props.exam.id ? props.exam.id : '')}>
./components/NavBar.jsx:      {props.exam.id ? <i>{props.exam.name}</i> : 'Add exam'}
./components/NavBar.jsx:        <Link className={'navbar-item' + (props.exam.id === exam.id ? ' is-active' : '')}
./components/NavBar.jsx:          to={'/exams/' + exam.id} key={exam.id} >
./components/NavBar.jsx:        <a className={'navbar-item' + (props.grader && props.grader.id === grader.id ? ' is-active' : '')}
./components/NavBar.jsx:          key={grader.id} onClick={() => props.changeGrader(grader)} >
./components/NavBar.jsx:  const exportUrl = format => `/api/export/${format}/${props.exam.id}`
./components/NavBar.jsx:        const examIDs = exams.map(exam => exam.id)
./components/NavBar.jsx:        const examID = this.props.exam.id
./components/NavBar.jsx:            this.props.updateExam(exams[exams.length - 1].id)
./components/NavBar.jsx:          const i = graders.findIndex(grader => grader.id === oldGraderID)
./components/NavBar.jsx:    const submissionsEnabled = this.props.exam.id !== null
./components/NavBar.jsx:    const exportEnabled = this.props.exam.id !== null
./components/NavBar.jsx:    const emailEnabled = this.props.exam.id !== null
./components/NavBar.jsx:            <Link className='navbar-item' disabled={!submissionsEnabled} to={'/submissions/' + this.props.exam.id}>Submissions</Link>
./components/SearchBox.jsx:    this.props.setSelected(suggestion.id)
./App.jsx:    api.get('submissions/' + this.state.exam.id + '/' + submissionCopy)
./App.jsx:    window.sessionStorage.setItem('graderID', grader.id)
./App.jsx:                ? <Grade examID={exam.id} gradeAnonymous={exam.gradeAnonymous} graderID={this.state.grader.id} />
./views/Students.jsx:    if (newProps.exam.id !== prevState.examID && newProps.exam.submissions.length) {
./views/Students.jsx:        input: newProps.exam.submissions[0].id,
./views/Students.jsx:        examID: newProps.exam.id
./views/Students.jsx:        input: this.props.exam.submissions[newIndex].id
./views/Students.jsx:        input: this.props.exam.submissions[newIndex].id
./views/Students.jsx:          input: this.props.exam.submissions[i].id,
./views/Students.jsx:          input: this.props.exam.submissions[i].id,
./views/Students.jsx:    api.put('submissions/' + this.props.exam.id + '/' + this.props.exam.submissions[this.state.index].copy, { studentID: stud.id })
./views/Students.jsx:    if (student && student.id) {
./views/Students.jsx:                              'student.id'
./views/Students.jsx:                                return `#${copy}: ${student.firstName} ${student.lastName} (${student.id})`
./views/Students.jsx:                                      ({stud.id})
./views/Students.jsx:                    <img src={'api/images/signature/' + this.props.exam.id + '/' + subm.copy} alt='' />
./views/students/StudentPanelBlock.jsx:    <div key={props.student.id}>
./views/students/StudentPanelBlock.jsx:        key={props.student.id} id={props.student.id} selected={props.selected} onClick={props.selectStudent}>
./views/students/StudentPanelBlock.jsx:        {props.student.id}&emsp;
./views/students/EditPanel.jsx:        id: stud.id,
./views/students/EditPanel.jsx:      studentID: this.state.id,
./views/students/EditPanel.jsx:          this.idblock.clear()
./views/students/EditPanel.jsx:          let totalSuccess = resp.added + resp.updated + resp.identical
./views/students/EditPanel.jsx:          if (resp.identical) sentences.push(<React.Fragment><b>{resp.identical}</b> were already up to date</React.Fragment>)
./views/students/EditPanel.jsx:    const empty = !(this.state.id + this.state.firstName + this.state.lastName + this.state.email)
./views/students/EditPanel.jsx:    const full = this.state.id && this.state.firstName && this.state.lastName
./views/students/EditPanel.jsx:        <IDBlock setID={this.setID} editStud={this.state.id} ref={(id) => { this.idblock = id }} />
./views/students/SearchPanel.jsx:      const clickedId = parseInt(event.target.id)
./views/students/SearchPanel.jsx:      const newIndex = this.state.result.findIndex(result => result.id === clickedId)
./views/students/SearchPanel.jsx:          <StudentPanelBlock key={student.id} student={student}
./views/students/SearchPanel.jsx:            matched={this.props.student && student.id === this.props.student.id && this.props.validated}
./views/AddExam.jsx:        this.props.changeURL('/exams/' + exam.id)
./views/email/TemplateControls.jsx:        `templates/${this.props.exam.id}`,
./views/email/StudentControls.jsx:      student => student.id
./views/email/StudentControls.jsx:                  const idx = this.state.students.findIndex(s => s.id === studentID)
./views/email/StudentControls.jsx:                    ? `${student.firstName} ${student.lastName} (${student.id})`
./views/email/StudentControls.jsx:                    <i style={{float: 'right'}}>({student.id})</i>
./views/email/EmailControls.jsx:        `email/${this.props.exam.id}/${this.props.student.id}`,
./views/email/EmailControls.jsx:      api.put(`exams/${this.props.exam.id}`, {grade_anonymous: false}).then(
./views/email/EmailControls.jsx:            <a onClick={() => api.put(`exams/${this.props.exam.id}`, {grade_anonymous: true})}>
./views/email/EmailControls.jsx:        `email/${this.props.exam.id}`,
./views/email/TemplateEditor.jsx:      `templates/rendered/${props.exam.id}/${props.student.id}`,
./views/email/TemplateEditor.jsx:               nextProps.student.id !== this.props.student.id) {
./views/Submissions.jsx:    api.get('scans/' + this.props.exam.id)
./views/Submissions.jsx:    api.get('submissions/missing_pages/' + this.props.exam.id)
./views/Submissions.jsx:      api.post('scans/' + this.props.exam.id, data)
./views/Submissions.jsx:                    <li key={scan.id}>
./views/Overview.jsx:            <img src={'api/images/summary/' + this.props.exam.id} />
./views/ExamEditor.jsx:          widgetData.id = result.widget_id
./views/ExamEditor.jsx:          problemData.id = result.id
./views/ExamEditor.jsx:    return api.patch('widgets/' + widget.id, data).then(() => {
./views/ExamEditor.jsx:    const isSelected = widget.id === this.props.selectedWidgetId
./views/ExamEditor.jsx:        key={'widget_mc_' + widget.id}
./views/ExamEditor.jsx:        bounds={'[data-key="widget_' + widget.id + '"]'}
./views/ExamEditor.jsx:          this.props.selectWidget(widget.id)
./views/ExamEditor.jsx:              <div key={'widget_mco_' + option.id} className='mcq-option'
./views/ExamEditor.jsx:    const isSelected = widget.id === this.props.selectedWidgetId
./views/ExamEditor.jsx:        key={'widget_' + widget.id}
./views/ExamEditor.jsx:        data-key={'widget_' + widget.id}
./views/ExamEditor.jsx:          this.props.updateWidget(widget.id, {
./views/ExamEditor.jsx:          this.props.selectWidget(widget.id)
./views/ExamEditor.jsx:          this.props.updateWidget(widget.id, {
./views/ExamEditor.jsx:    const isSelected = widget.id === this.props.selectedWidgetId
./views/ExamEditor.jsx:        key={'widget_' + widget.id}
./views/ExamEditor.jsx:          this.props.selectWidget(widget.id)
./views/ExamEditor.jsx:          this.props.updateWidget(widget.id, {
./views/Email.jsx:      .get(`templates/${this.props.exam.id}`)
./views/Exam.jsx:    if (newProps.exam.id !== prevState.examID) {
./views/Exam.jsx:        widgets[problem.widget.id] = {
./views/Exam.jsx:            id: problem.id,
./views/Exam.jsx:        widgets[examWidget.id] = examWidget
./views/Exam.jsx:        examID: newProps.exam.id,
./views/Exam.jsx:    if (this.props.examID !== this.props.exam.id) this.props.updateExam(this.props.examID)
./views/Exam.jsx:    const index = problemWidget.problem.feedback.findIndex(e => { return e.id === feedback.id })
./views/Exam.jsx:            [problemWidget.id]: {
./views/Exam.jsx:            [problemWidget.id]: {
./views/Exam.jsx:            [problemWidget.id]: {
./views/Exam.jsx:    this.props.updateExam(this.props.exam.id)
./views/Exam.jsx:    api.put('problems/' + problem.id, { name: problem.name })
./views/Exam.jsx:    api.put('problems/' + problem.id, { grading_policy: newPolicy })
./views/Exam.jsx:        selectedWidgetId: widgetData.id,
./views/Exam.jsx:          [widgetData.id]: {
./views/Exam.jsx:      api.del('problems/' + widget.problem.id)
./views/Exam.jsx:            let index = widget.problem.feedback.findIndex(e => { return e.id === feedbackId })
./views/Exam.jsx:            let index = widget.problem.feedback.findIndex(e => { return e.id === feedbackId })
./views/Exam.jsx:      'problem_id': problemWidget.problem.id,
./views/Exam.jsx:      data.id = result.mult_choice_id
./views/Exam.jsx:      feedback.id = result.feedback_id
./views/Exam.jsx:          [problemWidget.id]: {
./views/Exam.jsx:    return api.del('mult-choice/' + option.id)
./views/Exam.jsx:        let indexFb = widget.problem.feedback.findIndex(e => { return e.id === option.feedback_id })
./views/Exam.jsx:                [widget.id]: {
./views/Exam.jsx:        [widget.id]: {
./views/Exam.jsx:                    formData.append('problem_id', props.problem.id)
./views/Exam.jsx:                    api.patch('mult-choice/' + option.id, formData)
./views/Exam.jsx:                  ? <EditPanel problemID={props.problem.id} feedback={this.state.feedbackToEdit}
./views/grade/ProblemSelector.jsx:              value={this.props.current.id}
./views/grade/ProblemSelector.jsx:                <option key={problem.id} value={problem.id}>{problem.name}</option>
./views/grade/GradeNavigation.jsx:                  'student.id',
./views/grade/GradeNavigation.jsx:                    return `${student.firstName} ${student.lastName} (${student.id})`
./views/grade/GradeNavigation.jsx:                        ({student.id}, #{copy})
./views/Graders.jsx:                  <li key={grader.id}>{grader.name}</li>
./views/Grade.jsx:      const problemID = metadata.problems[0].id
./views/Grade.jsx:    api.get(`grade/navigation/${this.props.examID}/${this.state.submission.copy}/${this.state.problem.id}` +
./views/Grade.jsx:    const currentIndex = this.state.problems.findIndex(p => p.id === this.state.problem.id)
./views/Grade.jsx:    const newId = this.state.problems[currentIndex - 1].id
./views/Grade.jsx:    const currentIndex = this.state.problems.findIndex(p => p.id === this.state.problem.id)
./views/Grade.jsx:    const newId = this.state.problems[currentIndex + 1].id
./views/Grade.jsx:    this.setProblem(this.state.problem.id)
./views/Grade.jsx:    this.toggleFeedbackOption(this.state.problem.feedback[index].id)
./views/Grade.jsx:    api.put(`solution/${this.props.examID}/${submission.copy}/${problem.id}`, {
./views/Grade.jsx:    api.put(`solution/approve/${this.props.examID}/${submission.copy}/${problem.id}`, {
./views/Grade.jsx:    const solution = submission.problems.find(p => p.id === problem.id)
./views/Grade.jsx:      sub.copy !== submission.copy && submission.student && sub.student && sub.student.id === submission.student.id)
./views/Grade.jsx:                      problemID={problem.id}
./views/Grade.jsx:                    problem.id + '/' + submission.copy + '/' + (this.state.fullPage ? '1' : '0')) + '?' +
