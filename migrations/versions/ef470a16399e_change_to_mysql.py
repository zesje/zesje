""" Change to MySQL

Revision ID: ef470a16399e
Revises:

"""
import os
from alembic import op
import sqlalchemy as sa
from flask import current_app
from zesje.database import db


# revision identifiers, used by Alembic.
revision = "ef470a16399e"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # If you make any changes to the Exam table, please use
    # a batch operation and supply the sqlite_autoincrement
    # argument to preserve the AUTOINCREMENT keyword.
    # See ./6b926be35894_exam_autoincrement.py for a reference.
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "exam",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("token", sa.String(length=12), nullable=True),
        sa.Column("finalized", sa.Boolean(), server_default="0", nullable=True),
        sa.Column("grade_anonymous", sa.Boolean(), server_default="0", nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("token"),
    )
    op.create_table(
        "grader",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "student",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("first_name", sa.Text(), nullable=False),
        sa.Column("last_name", sa.Text(), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "widget",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.Text(), nullable=True),
        sa.Column("x", sa.Integer(), nullable=False),
        sa.Column("y", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(length=20), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "exam_widget",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("exam_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["exam_id"],
            ["exam.id"],
        ),
        sa.ForeignKeyConstraint(
            ["id"],
            ["widget.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "problem",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("exam_id", sa.Integer(), nullable=False),
        sa.Column(
            "grading_policy",
            sa.Enum("set_nothing", "set_blank", "set_single", name="gradingpolicy"),
            server_default="set_blank",
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["exam_id"],
            ["exam.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "scan",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("exam_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("status", sa.Text(), nullable=False),
        sa.Column("message", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["exam_id"],
            ["exam.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "submission",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("exam_id", sa.Integer(), nullable=False),
        sa.Column("student_id", sa.Integer(), nullable=True),
        sa.Column("validated", sa.Boolean(), server_default="0", nullable=False),
        sa.ForeignKeyConstraint(
            ["exam_id"],
            ["exam.id"],
        ),
        sa.ForeignKeyConstraint(
            ["student_id"],
            ["student.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "copy",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column("submission_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["submission_id"],
            ["submission.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "feedback_option",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("problem_id", sa.Integer(), nullable=True),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("score", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["problem_id"],
            ["problem.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "page",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("path", sa.Text(), nullable=False),
        sa.Column("copy_id", sa.Integer(), nullable=True),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["copy_id"],
            ["copy.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "problem_widget",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("problem_id", sa.Integer(), nullable=False),
        sa.Column("page", sa.Integer(), nullable=True),
        sa.Column("width", sa.Integer(), nullable=True),
        sa.Column("height", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["widget.id"],
        ),
        sa.ForeignKeyConstraint(
            ["problem_id"],
            ["problem.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "solution",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("submission_id", sa.Integer(), nullable=False),
        sa.Column("problem_id", sa.Integer(), nullable=False),
        sa.Column("grader_id", sa.Integer(), nullable=True),
        sa.Column("graded_at", sa.DateTime(), nullable=True),
        sa.Column("remarks", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["grader_id"],
            ["grader.id"],
        ),
        sa.ForeignKeyConstraint(
            ["problem_id"],
            ["problem.id"],
        ),
        sa.ForeignKeyConstraint(
            ["submission_id"],
            ["submission.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "mc_option",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("label", sa.Text(), nullable=True),
        sa.Column("feedback_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["feedback_id"],
            ["feedback_option.id"],
        ),
        sa.ForeignKeyConstraint(
            ["id"],
            ["widget.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "solution_feedback",
        sa.Column("solution_id", sa.Integer(), nullable=False),
        sa.Column("feedback_option_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["feedback_option_id"],
            ["feedback_option.id"],
        ),
        sa.ForeignKeyConstraint(
            ["solution_id"],
            ["solution.id"],
        ),
        sa.PrimaryKeyConstraint("solution_id", "feedback_option_id"),
    )
    # ### end Alembic commands ###

    db_file = os.path.join(current_app.config.get("DATA_DIRECTORY"), "course.sqlite")
    if os.path.exists(db_file):
        engine_lite = sa.create_engine("sqlite:///" + db_file)

        with engine_lite.connect() as conn_lite:
            for table in db.metadata.sorted_tables:
                data = [dict(row) for row in conn_lite.execute(sa.select(table.c))]
                if len(data) > 0:
                    op.execute(table.insert().values(data))


def downgrade():
    pass
